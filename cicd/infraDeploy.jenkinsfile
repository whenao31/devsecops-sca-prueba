pipeline {
    // agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    agent {
        docker {
            image 'hashicorp/terraform:latest'
            args  '--entrypoint="" -u root -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY'
        }
    }

    parameters {
        string(name: 'environment', defaultValue: 'terraform', description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')

    }

    stages {
        stage('Validate') {
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }

            steps {
                sh 'pwd'
                dir('terraform/aws/resources') {
                    sh 'terraform init --backend=false'
                    sh 'terraform validate'
                    sh 'terraform fmt'
                    sh 'terraform fmt --check'
                }
            }
        }
        stage('Plan') {
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }

            steps {
                dir('terraform/aws/resources') {
                    sh 'terraform init'
                    sh 'terraform workspace select ${environment} || terraform workspace new ${environment}'

                    sh "terraform plan -input=false -out sca.tfplan "
                    sh 'terraform show -no-color tfplan > tfplan.txt'
                }
            }
        }
        stage('Approval') {
           when {
               not {
                   equals expected: true, actual: params.autoApprove
               }
               not {
                    equals expected: true, actual: params.destroy
                }
           }
           
           steps {
               script {
                    def plan = readFile 'terraform/aws/resources/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
               }
           }
        }
        stage('Apply') {
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }
            
            steps {
                dir('terraform/aws/resources') {
                    sh "terraform apply -input=false tfplan"
                }
            }
        }
        
        stage('Destroy') {
            when {
                equals expected: true, actual: params.destroy
            }
        
            steps {
                dir('terraform/aws/resources') {
                    sh "terraform destroy --auto-approve"
                }
            }
        }
    }
}
